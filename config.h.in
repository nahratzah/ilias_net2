/*
 * Copyright (c) 2012 Ariane van der Steldt <ariane@stack.nl>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


/* OS has sendmsg call. */
#cmakedefine HAVE_SENDMSG

/* Struct sockaddr_in6 has sin6_len member. */
#cmakedefine HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN

/* Struct sockaddr_in has sin_len member. */
#cmakedefine HAVE_STRUCT_SOCKADDR_IN_SIN_LEN

/* pthread_np.h exists. */
#cmakedefine HAVE_PTHREAD_NP_H

/* pthread_set_name_np implemented. */
#cmakedefine HAS_PTHREAD_SET_NAME_NP

/* Set if writev function exists. */
#cmakedefine HAS_WRITEV

/* Set if sha2 code is supplied by system. */
#cmakedefine HAS_SHA2

/* Set if arc4random is implemented by system. */
#cmakedefine HAS_ARC4RANDOM

/* Set if the nanosleep function exists. */
#cmakedefine HAS_NANOSLEEP

/* Set if vasprintf function exists. */
#cmakedefine HAS_VASPRINTF
/* Set if asprintf function exists. */
#cmakedefine HAS_ASPRINTF

/* Set if vsnprintf function exists. */
#cmakedefine HAS_VSNPRINTF
/* Set if snprintf function exists. */
#cmakedefine HAS_SNPRINTF

/* Set if strlcpy function exists. */
#cmakedefine HAS_STRLCPY

/* Set if strlcat function exists. */
#cmakedefine HAS_STRLCAT

/* Set if sys/param.h include exists. */
#cmakedefine HAVE_SYS_PARAM_H

/* Set if sysexits.h include exists. */
#cmakedefine HAVE_SYSEXITS_H

/* Set if sys/time.h include exists. */
#cmakedefine HAVE_SYS_TIME_H

/* Set if time.h include exists. */
#cmakedefine HAVE_TIME_H

/* Set if sys/ioctl.h include exists. */
#cmakedefine HAVE_SYS_IOCTL_H

/* Set if getopt.h include exists. */
#cmakedefine HAVE_GETOPT_H

/* Set if sys/queue.h exists. */
#cmakedefine HAVE_SYS_QUEUE_H

/* Set if sys/tree.h exists. */
#cmakedefine HAVE_SYS_TREE_H

/* Set if stdatomic.h exists. */
#cmakedefine HAVE_STDATOMIC_H

/* Set if semaphore.h exists. */
#cmakedefine HAVE_SEMAPHORE_H

/* Set if the platform is a big endian architecture. */
#cmakedefine IS_BIG_ENDIAN

/* Pthread spinlock is available. */
#cmakedefine HAVE_PTHREAD_SPINLOCK

/* Set if <type_traits> c++ include file exists. */
#cmakedefine HAVE_TYPE_TRAITS

/* Set if std::move is present in <utility>. */
#cmakedefine HAS_STD_MOVE

/* Set if std::move_if_noexcept is present in <utility>. */
#cmakedefine HAS_STD_MOVE_IF_NOEXCEPT

/* Set if std::is_nothrow_{copy,move}_constructable and std::is_nothrow_destructable templates exist. */
#cmakedefine HAS_CONSTRUCTOR_TRAITS

/* Set if __thread makes a variable use thread-local storage. */
#cmakedefine HAS___THREAD

/* Set if thread_local keyword is supported. */
#cmakedefine HAS_THREAD_LOCAL

/* Set if std::allocator_traits is present in <memory>. */
#cmakedefine01 HAS_ALLOCATOR_TRAITS


/*
 * Different versions of MS-compiler.
 *
 * The _MSC_VER points at the visual studio versions, which are stable releases
 * (i.e. if feature X is present in VS10, it will be present in VS11).
 * The _MSC_FULL_VER is a more detailed version number, used to find specific builds
 * of the compiler.
 *
 * Unfortunately, MSC support for C++11 is pretty shitty.  The November CTP finally
 * introduces variadic templates and explicit conversion operators.  Unfortunately
 * this does not mean new compilers automatically have the same functionality:
 * the TFS release has a higher _MSC_FULL_VER, but is a release targeting windows XP,
 * lacking the C++11 features this library requires.  Feature testing on MS is going
 * to be a giant white-list of compilers until they finally release real C++11
 * support.
 *
 * Sad tidbit of information: notice that the MSC_VS2012 macro is not used in feature
 * tests: they have hardly anything interesting in 2 years of development.  Even the
 * boring stuff for which all they had to do was add a line to their parser (noexcept,
 * without the conditionals) they did not manage to implement in this time span.
 * I really wonder why I even bother with this platform...
 */
#define MSC_VS10		(_MSC_VER >= 1600)
#define MSC_VS11		(_MSC_VER >= 1700)
#define MSC_VS11_NOV_CTP	(_MSC_FULL_VER == 170051025)	/* Nov CTP, has some c++11 features. */
#define MSC_VS2010		MSC_VS10
#define MSC_VS2012		MSC_VS11


#if defined(__clang__)
/* Features of clang compiler. */
#define HAS_VARARG_TEMPLATES	__has_feature(cxx_variadic_templates)
#define HAS_DECLTYPE		__has_feature(cxx_decltype)
#define HAS_DELETED_FN		__has_feature(cxx_deleted_functions)
#define HAS_RVALUE_REF		__has_feature(cxx_rvalue_references)
#define HAS_NOEXCEPT		__has_feature(cxx_noexcept)
#define HAS_CONSTEXPR		__has_feature(cxx_constexpr)
#define HAS_EXPL_OP_BOOL	__has_feature(cxx_explicit_conversions)
#define HAS_OVERRIDE		__has_feature(cxx_override_control)
#define HAS_ALIAS_TEMPLATES	__has_feature(cxx_alias_templates)

#elif defined(__GNUC__)
/* Features of GNU compiler. */
#define ILIAS_NET2_gnuc_require(ma, mi)					\
	(__GNUC__ > (ma) || (__GNUC__ == (ma) && __GNUC_MINOR__ >= (mi)))
#define HAS_VARARG_TEMPLATES	ILIAS_NET2_gnuc_require(4, 3)
#define HAS_DECLTYPE		ILIAS_NET2_gnuc_require(4, 3)
#define HAS_DELETED_FN		ILIAS_NET2_gnuc_require(4, 4)
#define HAS_RVALUE_REF		ILIAS_NET2_gnuc_require(4, 3)
#define HAS_NOEXCEPT		ILIAS_NET2_gnuc_require(4, 6)
#define HAS_CONSTEXPR		ILIAS_NET2_gnuc_require(4, 6)
#define HAS_EXPL_OP_BOOL	ILIAS_NET2_gnuc_require(4, 5)
#define HAS_OVERRIDE		ILIAS_NET2_gnuc_require(4, 7)
#define HAS_ALIAS_TEMPLATES	ILIAS_NET2_gnuc_require(4, 7)

#elif defined(_MSC_VER)
/* Features of Microsoft compiler. */
#define HAS_VARARG_TEMPLATES	MSC_VS11_NOV_CTP /* Specific version, subsequent releases will not contain features. */
#define HAS_DECLTYPE		MSC_VS2010
#define HAS_DELETED_FN		0 /* They don't have it. */
#define HAS_RVALUE_REF		MSC_VS2010
#define HAS_NOEXCEPT		0 /* They don't have it, despite them being a major reason for the semantics. */
#define HAS_CONSTEXPR		0 /* They don't have it.  They will complain if you redefine it, though. */
#define HAS_EXPL_OP_BOOL	MSC_VS11_NOV_CTP
#define HAS_OVERRIDE		MSC_VS2010
#define HAS_ALIAS_TEMPLATES	0 /* They don't have this either. */
#endif

/* Unknown compiler, assume it doesn't implement anything. */
#ifndef HAS_VARARG_TEMPLATES
/* We don't know if your compiler supports Variadic Template Arguments. */
#define HAS_VARARG_TEMPLATES	0
#endif
#ifndef HAS_DECLTYPE
/* We don't know if your compiler supports Decltype. */
#define HAS_DECLTYPE		0
#endif
#ifndef HAS_DELETED_FN
/* We don't know if your compiler supports Deleted Functions. */
#define HAS_DELETED_FN		0
#endif
#ifndef HAS_NOEXCEPT
/* We don't know if your compiler supports NoExcept keyword. */
#define HAS_NOEXCEPT		0
#endif
#ifndef HAS_CONSTEXPR
/* We don't know if your compiler has constexpr keyword. */
#define HAS_CONSTEXPR		0
#endif
#ifndef HAS_EXPL_OP_BOOL
/* We don't know if your compiler supports 'explicit operator bool()'. */
#define HAS_EXPL_OP_BOOL	0
#endif
#ifndef HAS_OVERRIDE
/* We don't know if your compiler supports override keyword. */
#define HAS_OVERRIDE		0
#endif
#ifndef HAS_ALIAS_TEMPLATES
/* We don't know if your compiler supports alias templates. */
#define HAS_ALIAS_TEMPLATES	0
#endif

#if HAS_RVALUE_REF && !defined(HAS_STD_MOVE)
/* Compiler supports rvalue references, but std::move is not implemented. */
#undef HAS_RVALUE_REF
#define HAS_RVALUE_REF		0
#endif


/*
 * Feature exposing macros.
 */
#if HAS_RVALUE_REF
#define RVALUE(x)		x&&
#define RVALUE_REF(x)		x&&
#define RVALUE_CREF(x)		x&&
#define MOVE(x)			std::move((x))
#ifdef HAS_STD_MOVE_IF_NOEXCEPT
#define MOVE_IF_NOEXCEPT(x)	std::move_if_noexcept((x))
#else
#define MOVE_IF_NOEXCEPT(x)	(x)
#endif
#else
#define RVALUE(x)		x
#define RVALUE_REF(x)		x&
#define RVALUE_CREF(x)		const x&
#define MOVE(x)			(x)
#define MOVE_IF_NOEXCEPT(x)	(x)
#endif

#if HAS_CONSTEXPR
#define CONSTEXPR		constexpr
#define CONSTEXPR_VALUE		constexpr
#else
#define CONSTEXPR		/* Unsupported. */
#define CONSTEXPR_VALUE		const
#endif

#if HAS_OVERRIDE
#define OVERRIDE		override
#define FINAL			final
#else
#define OVERRIDE		/* Unsupported. */
#define FINAL			/* Unsupported. */
#endif

#if HAS_NOEXCEPT
#define ILIAS_NET2_NOTHROW		noexcept
#define ILIAS_NET2_NOTHROW_CND(_x)	noexcept(_x)
#else
#define ILIAS_NET2_NOTHROW		throw ()
#define ILIAS_NET2_NOTHROW_CND(_x)	/* No conditional support. */
#endif

#define ILIAS_NET2_NOTHROW_CND_TEST(_x)	/* Not yet: figure out correct syntax for noexcept(noexcept(expr)) and compiler support. */

#if HAS_CONSTRUCTOR_TRAITS
#define ILIAS_NET2_NOTHROW_TRAITS	ILIAS_NET2_NOTHROW_CND
#else
#define ILIAS_NET2_NOTHROW_TRAITS(...)	/* Type traits not available. */
#endif

/*
 * Declare how to get thread-local storage support.
 */
#define HAS_TLS			1	/* Changed to 0 below, if unsupported. */
#if defined(HAS_THREAD_LOCAL)
#define THREAD_LOCAL		thread_local
#elif defined(HAS___THREAD)
#define THREAD_LOCAL		__thread
#elif WIN32
#define THREAD_LOCAL		__declspec(thread)
#else
#undef HAS_TLS
#define HAS_TLS			0	/* No support for tls.  A fallback using posix will be used. */
#endif


/* Exclude whatever breaks this library on windows, due to too many definitions in <windows.h>. */
#ifdef WIN32
#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
#define NOMINMAX			// Exclude min/max macros.
#endif
